final_res[[1]] <- final_df_m
final_res[[2]] <- imports
return(final_res)
} else if (method == "Random Forest") {
set.seed(10)
final_res <- list()
labels <- factor(labels)
data_label <- cbind(labels, data)
x <- data_label
colnames(x)[1] <- "labels"
test.fold <- split(sample(1:length(labels)), 1:folds)
for (mm in 1:folds) {
test <- test.fold[[mm]]
train_df <- x[-test, ]
test_df <- x[test, ]
iris.rf <- randomForest(labels ~ ., data = train_df, importance = TRUE, proximity = TRUE)
pre_iris <- predict(iris.rf, test_df)
true_label <- dummies::dummy(test_df$labels, sep = ".")
true_label <- data.frame(true_label)
colnames(true_label) <- gsub(".*?\\.", "", colnames(true_label))
colnames(true_label) <- paste0(colnames(true_label), "_true")
pred_label <- dummies::dummy(pre_iris, sep = ".")
pred_label <- data.frame(pred_label)
colnames(pred_label) <- gsub(".*?\\.", "", colnames(pred_label))
colnames(pred_label) <- paste0(colnames(pred_label), "_pred_SVM")
final_df_2 <- cbind(true_label, pred_label)
final_df2_t <- t(final_df_2)
final_df2_t_la <- rownames(final_df2_t)
final_df2_t_c <- as.data.frame(cbind(final_df2_t_la, final_df2_t))
import_f <- iris.rf$importance[, 4]
import_s <- import_f[order(import_f, decreasing = T)][1:10]
import_a <- as.data.frame(cbind(row.names(t(t(import_s))), t(t(import_s))))
colnames(import_a) <- c("V1", paste0("V_", mm))
if (mm == 1) {
final_df_m <- final_df2_t_c
imports <- import_a
} else {
final_df_m <- merge(final_df_m, final_df2_t_c, by = "final_df2_t_la", all = T)
imports <- merge(imports, import_a, by = "V1", all = T)
}
}
final_res[[1]] <- final_df_m
final_res[[2]] <- imports
return(final_res)
} else if (method == "Support Vector Machine") {
set.seed(10)
final_res <- list()
data_label <- cbind(as.numeric(labels), data)
x <- data_label
y <- factor(data_label[, 1])
colnames(x)[1] <- "labels"
test.fold <- split(sample(1:length(labels)), 1:folds)
for (mm in 1:folds) {
test <- test.fold[[mm]]
train_df <- x[-test, ]
test_df <- x[test, ]
svmmodel <- svm(labels ~ ., data = train_df, kernel = "radial", type = "C-classification", probability = TRUE)
svm_pred <- predict(svmmodel, test_df, probability = TRUE)
svm_pred <- attr(svm_pred, "probabilities")
colnames(svm_pred) <- paste0(colnames(svm_pred), "_pred_SVM")
true_label <- dummies::dummy(test_df$labels, sep = ".")
true_label <- data.frame(true_label)
colnames(true_label) <- gsub(".*?\\.", "", colnames(true_label))
colnames(true_label) <- paste0(colnames(true_label), "_true")
final_df_2 <- cbind(true_label, svm_pred)
final_df2_t <- t(final_df_2)
final_df2_t_la <- rownames(final_df2_t)
final_df2_t_c <- as.data.frame(cbind(final_df2_t_la, final_df2_t))
w <- t(svmmodel$coefs) %*% svmmodel$SV
rankingCriteria <- w * w
ranking <- rev(sort(rankingCriteria[1, ]))
import_f <- t(t(ranking))
import_s <- import_f[order(import_f, decreasing = T)][1:10]
import_a <- as.data.frame(cbind(row.names(t(t(import_f))), t(t(import_s))))
colnames(import_a) <- c("V1", paste0("V_", mm))
if (mm == 1) {
final_df_m <- final_df2_t_c
imports <- import_a
} else {
final_df_m <- merge(final_df_m, final_df2_t_c, by = "final_df2_t_la", all = T)
imports <- merge(imports, import_a, by = "V1", all = T)
}
}
final_res[[1]] <- final_df_m
final_res[[2]] <- imports
return(final_res)
} else {
stop(paste("Invalid method:", method))
}
}
class3 <- classification1(corrected_data1,method = "Decision Trees")
class4 <- classification1(corrected_data1,method = "K-Nearest Neighbor")
class5 <- classification1(corrected_data1,method = "Linear Discriminat Analysis")
class6 <- classification1(corrected_data1,method = "Naive Bayes")
class7 <- classification1(corrected_data1,method = "Partial Least Squares")
class8 <- classification1(corrected_data1,method = "Random Forest")
class9 <- classification1(corrected_data1,method = "Support Vector Machine")
classification1 <- function(data2, labels, folds = 5, method) {
library(adabag)
library(C50)
library(pROC)
library(kknn)
library(MASS)
library(e1071)
library(AUC)
library(multiROC)
library(caret)
library(mlbench)
library(dummies)
library(randomForest)
labels <- factor(data2[,2])
data <- apply(data2[, -c(1:4)], 2, as.numeric)
data4 <- data2[, 1:4]
data[data == 0] <- NA
data <- as.data.frame(data)
if (method == "AdaBoost") {
set.seed(10)
final_res <- list()
data_label <- as.data.frame(cbind(labels, data))
colnames(data_label)[1] <- "labels"
test.fold <- split(sample(1:length(labels)), 1:folds)
for (mm in 1:folds) {
test <- test.fold[[mm]]
train_df <- data_label[-test, ]
test_df <- data_label[test, ]
train_df$labels <- as.factor(train_df$labels)
test_df$labels <- as.factor(test_df$labels)
boost_model <- boosting(labels ~ ., data = train_df)
boost_pred <- predict(boost_model, test_df)
true_label <- dummies::dummy(test_df$labels, sep = ".")
true_label <- data.frame(true_label)
colnames(true_label) <- gsub(".*?\\.", "", colnames(true_label))
colnames(true_label) <- paste0(colnames(true_label), "_true")
pred_label <- boost_pred$prob
colnames(pred_label) <- gsub("true", "pred_SVM", colnames(true_label))
final_df_2 <- cbind(true_label, pred_label)
final_df2_t <- t(final_df_2)
final_df2_t_la <- rownames(final_df2_t)
final_df2_t_c <- as.data.frame(cbind(final_df2_t_la, final_df2_t))
colnames(final_df2_t_c)[-1] <- paste0("Fold_", mm, "_", colnames(final_df2_t_c)[-1])
import_f <- boost_model$importance
import_s <- import_f[order(import_f, decreasing = T)][1:10]
import_a <- as.data.frame(cbind(row.names(t(t(import_s))), t(t(import_s))))
colnames(import_a) <- c("Feature", paste0("Importance_Fold_", mm))
if (mm == 1) {
final_df_m <- final_df2_t_c
imports <- import_a
} else {
final_df_m <- merge(final_df_m, final_df2_t_c, by = "final_df2_t_la", all = TRUE)
imports <- merge(imports, import_a, by = "Feature", all = TRUE)
}
}
final_res[[1]] <- final_df_m
final_res[[2]] <- imports
return(final_res)
} else if (method == "Bagging") {
set.seed(10)
final_res <- list()
data_label <- as.data.frame(cbind(labels, data))
x <- data_label
y <- factor(data_label[,1])
colnames(x)[1] <- "labels"
test.fold <- split(sample(1:length(labels)), 1:folds)
for (mm in 1:folds) {
test <- test.fold[[mm]]
train_df <- x[-test, ]
test_df <- x[test, ]
train_df$labels <- as.factor(train_df$labels)
boost_model <- bagging(labels~., data=train_df)
boost_pred <- predict.bagging(boost_model, test_df)
true_label <- dummies::dummy(test_df$labels, sep = ".")
true_label <- data.frame(true_label)
colnames(true_label) <- gsub(".*?\\.", "", colnames(true_label))
colnames(true_label) <- paste0(colnames(true_label), "_true")
pred_label <- boost_pred$prob
colnames(pred_label) <- gsub("true","pred_SVM",colnames(true_label))
final_df_2 <- cbind(true_label, pred_label)
final_df2_t <- t(final_df_2)
final_df2_t_la <- rownames(final_df2_t)
final_df2_t_c <- as.data.frame(cbind(final_df2_t_la, final_df2_t))
import_f <- boost_model$importance
import_s <- import_f[order(import_f, decreasing = T)][1:10]
import_a <- as.data.frame(cbind(row.names(t(t(import_s))), t(t(import_s))))
colnames(import_a) <- c("V1", paste0("V_", mm))
if (mm == 1) {
final_df_m <- final_df2_t_c
imports <- import_a
} else {
final_df_m <- merge(final_df_m, final_df2_t_c, by = "final_df2_t_la", all = T)
imports <- merge(imports, import_a, by = "V1", all = T)
}
}
final_res[[1]] <- final_df_m
final_res[[2]] <- imports
return(final_res)
} else if (method == "Decision Trees") {
set.seed(10)
final_res <- list()
data_label <- as.data.frame(cbind(labels, data))
x <- data_label
y <- factor(data_label[,1])
colnames(x)[1] <- "labels"
test.fold <- split(sample(1:length(labels)), 1:folds)
for (mm in 1:folds) {
test <- test.fold[[mm]]
train_df <- x[-test, ]
test_df <- x[test, ]
credit_boost <- C5.0(labels~., data = train_df, trials = 10, probability = TRUE)
credit_boost_pred <- predict(credit_boost, test_df, probability = TRUE)
true_label <- dummies::dummy(test_df$labels, sep = ".")
true_label <- data.frame(true_label)
colnames(true_label) <- gsub(".*?\\.", "", colnames(true_label))
colnames(true_label) <- paste0(colnames(true_label), "_true")
pred_label <- dummies::dummy(credit_boost_pred, sep = ".")
pred_label <- data.frame(pred_label)
colnames(pred_label) <- gsub(".*?\\.", "", colnames(pred_label))
colnames(pred_label) <- paste0(colnames(pred_label), "_pred_SVM")
final_df_2 <- cbind(true_label, pred_label)
final_df2_t <- t(final_df_2)
final_df2_t_la <- rownames(final_df2_t)
final_df2_t_c <- as.data.frame(cbind(final_df2_t_la,final_df2_t))
import_f <- as.data.frame(varImp(credit_boost))
import_fn <- import_f[,1]
import_s <- import_fn[order(import_fn, decreasing = T)][1:10]
import_a <- as.data.frame(cbind(row.names(t(t(import_f))),t(t(import_s))))
colnames(import_a) <- c("V1", paste0("V_", mm))
if (mm == 1) {
final_df_m <- final_df2_t_c
imports <- import_a
} else {
final_df_m <- merge(final_df_m, final_df2_t_c, by = "final_df2_t_la", all = T)
imports <- merge(imports, import_a, by = "V1", all = T)
}
}
final_res[[1]] <- final_df_m
final_res[[2]] <- imports
return(final_res)
} else if (method == "K-Nearest Neighbor") {
set.seed(10)
final_res <- list()
data_label <- cbind(labels, data)
x <- data_label
y <- factor(data_label[,1])
colnames(x)[1] <- "labels"
test.fold <- split(sample(1:length(labels)), 1:folds)
for (mm in 1:folds) {
test <- test.fold[[mm]]
train_df <- x[-test, ]
test_df <- x[test, ]
iris.kknn <- kknn(labels~., train_df, test_df, distance = 1, kernel = "triangular")
true_label <- dummies::dummy(test_df$labels, sep = ".")
true_label <- data.frame(true_label)
colnames(true_label) <- gsub(".*?\\.", "", colnames(true_label))
colnames(true_label) <- paste0(colnames(true_label), "_true")
pred_label <- iris.kknn$prob
colnames(pred_label) <- gsub("true","pred_SVM",colnames(true_label))
final_df_2 <- cbind(true_label, pred_label)
final_df2_t <- t(final_df_2)
final_df2_t_la <- rownames(final_df2_t)
final_df2_t_c <- as.data.frame(cbind(final_df2_t_la,final_df2_t))
if (mm == 1) {
final_df_m <- final_df2_t_c
imports <- 1:10
} else {
final_df_m <- merge(final_df_m, final_df2_t_c, by = "final_df2_t_la", all = T)
imports <- 1:10
}
}
final_res[[1]] <- final_df_m
final_res[[2]] <- imports
return(final_res)
} else if (method == "Linear Discriminat Analysis") {
set.seed(10)
final_res <- list()
data_label <- cbind(labels, data)
x <- data_label
y <- factor(data_label[,1])
colnames(x)[1] <- "labels"
test.fold <- split(sample(1:length(labels)), 1:folds)
for (mm in 1:folds) {
test <- test.fold[[mm]]
train_df <- x[-test, ]
test_df <- x[test, ]
ld <- lda(labels~., train_df)
z_pred <- predict(ld, test_df)
true_label <- dummies::dummy(test_df$labels, sep = ".")
true_label <- data.frame(true_label)
colnames(true_label) <- gsub(".*?\\.", "", colnames(true_label))
colnames(true_label) <- paste0(colnames(true_label), "_true")
pred_label <- z_pred$posterior
colnames(pred_label) <- gsub("true","pred_SVM",colnames(true_label))
pred_label_s <- t(sapply(1:dim(pred_label)[1],function(i) ifelse(pred_label[i,]==max(pred_label[i,]),1,0)))
final_df_2 <- cbind(true_label, pred_label_s)
final_df2_t <- t(final_df_2)
final_df2_t_la <- rownames(final_df2_t)
final_df2_t_c <- as.data.frame(cbind(final_df2_t_la,final_df2_t))
import_f <- ld$scaling[,1]
import_s <- import_f[order(import_f, decreasing = T)][1:10]
import_a <- as.data.frame(cbind(row.names(t(t(import_s))),t(t(import_s))))
colnames(import_a) <- c("V1", paste0("V_", mm))
if (mm == 1) {
final_df_m <- final_df2_t_c
imports <- import_a
} else {
final_df_m <- merge(final_df_m, final_df2_t_c, by = "final_df2_t_la", all = T)
imports <- merge(imports, import_a, by = "V1", all = T)
}
}
final_res[[1]] <- final_df_m
final_res[[2]] <- imports
return(final_res)
} else if (method == "Naive Bayes") {
set.seed(10)
final_res <- list()
data_label <- cbind(as.numeric(labels), data)
x <- data_label
y <- factor(data_label[,1])
colnames(x)[1] <- "labels"
test.fold <- split(sample(1:length(labels)), 1:folds)
for (mm in 1:folds) {
test <- test.fold[[mm]]
train_df <- x[-test, ]
test_df <- x[test, ]
model <- naiveBayes(labels ~ ., data = train_df, laplace = 3)
pred <- predict(model, test_df)
true_label <- dummies::dummy(test_df$labels, sep = ".")
true_label <- data.frame(true_label)
colnames(true_label) <- gsub(".*?\\.", "", colnames(true_label))
colnames(true_label) <- paste0(colnames(true_label), "_true")
pred_label <- dummies::dummy(pred, sep = ".")
pred_label <- data.frame(pred_label)
colnames(pred_label) <- gsub(".*?\\.", "", colnames(pred_label))
colnames(pred_label) <- paste0(colnames(pred_label), "_pred_SVM")
final_df_2 <- cbind(true_label, pred_label)
final_df2_t <- t(final_df_2)
final_df2_t_la <- rownames(final_df2_t)
final_df2_t_c <- as.data.frame(cbind(final_df2_t_la,final_df2_t))
if (mm == 1) {
final_df_m <- final_df2_t_c
imports <- 1:10
} else {
final_df_m <- merge(final_df_m, final_df2_t_c, by = "final_df2_t_la", all = T)
imports <- 1:10
}
}
final_res[[1]] <- final_df_m
final_res[[2]] <- imports
return(final_res)
} else if (method == "Partial Least Squares") {
set.seed(10)
final_res <- list()
data_label <- cbind(labels, data)
x <- data_label[, -1]
y <- factor(data_label[, 1])
test.fold <- split(sample(1:length(labels)), 1:folds)
for (mm in 1:folds) {
test <- test.fold[[mm]]
train_df <- x[-test, ]
test_df <- x[test, ]
plsFit <- train(y ~ ., data = data.frame(train_df, y = y[-test]), method = "pls", preProc = c("center", "scale"), tuneLength = 15)
plsProbs <- predict(plsFit, newdata = test_df, type = "prob")
colnames(plsProbs) <- paste0(colnames(plsProbs), "_pred_SVM")
true_label <- dummies::dummy(test_df$labels, sep = ".")
true_label <- data.frame(true_label)
colnames(true_label) <- gsub(".*?\\.", "", colnames(true_label))
colnames(true_label) <- paste0(colnames(true_label), "_true")
final_df_2 <- cbind(true_label, plsProbs)
final_df2_t <- t(final_df_2)
final_df2_t_la <- rownames(final_df2_t)
final_df2_t_c <- as.data.frame(cbind(final_df2_t_la,final_df2_t))
import_raw <- varImp(plsFit)
import_f <- apply(as.data.frame(import_raw$importance), 1, mean)
import_s <- import_f[order(import_f, decreasing = T)][1:10]
import_a <- as.data.frame(cbind(row.names(t(t(import_s))),t(t(import_s))))
colnames(import_a) <- c("V1", paste0("V_", mm))
if (mm == 1) {
final_df_m <- final_df2_t_c
imports <- import_a
} else {
final_df_m <- merge(final_df_m, final_df2_t_c, by = "final_df2_t_la", all = T)
imports <- merge(imports, import_a, by = "V1", all = T)
}
}
final_res[[1]] <- final_df_m
final_res[[2]] <- imports
return(final_res)
} else if (method == "Random Forest") {
set.seed(10)
final_res <- list()
labels <- factor(labels)
data_label <- cbind(labels, data)
x <- data_label
colnames(x)[1] <- "labels"
test.fold <- split(sample(1:length(labels)), 1:folds)
for (mm in 1:folds) {
test <- test.fold[[mm]]
train_df <- x[-test, ]
test_df <- x[test, ]
iris.rf <- randomForest(labels ~ ., data = train_df, importance = TRUE, proximity = TRUE)
pre_iris <- predict(iris.rf, test_df)
true_label <- dummies::dummy(test_df$labels, sep = ".")
true_label <- data.frame(true_label)
colnames(true_label) <- gsub(".*?\\.", "", colnames(true_label))
colnames(true_label) <- paste0(colnames(true_label), "_true")
pred_label <- dummies::dummy(pre_iris, sep = ".")
pred_label <- data.frame(pred_label)
colnames(pred_label) <- gsub(".*?\\.", "", colnames(pred_label))
colnames(pred_label) <- paste0(colnames(pred_label), "_pred_SVM")
final_df_2 <- cbind(true_label, pred_label)
final_df2_t <- t(final_df_2)
final_df2_t_la <- rownames(final_df2_t)
final_df2_t_c <- as.data.frame(cbind(final_df2_t_la, final_df2_t))
import_f <- iris.rf$importance[, 4]
import_s <- import_f[order(import_f, decreasing = T)][1:10]
import_a <- as.data.frame(cbind(row.names(t(t(import_s))), t(t(import_s))))
colnames(import_a) <- c("V1", paste0("V_", mm))
if (mm == 1) {
final_df_m <- final_df2_t_c
imports <- import_a
} else {
final_df_m <- merge(final_df_m, final_df2_t_c, by = "final_df2_t_la", all = T)
imports <- merge(imports, import_a, by = "V1", all = T)
}
}
final_res[[1]] <- final_df_m
final_res[[2]] <- imports
return(final_res)
} else if (method == "Support Vector Machine") {
set.seed(10)
final_res <- list()
data_label <- cbind(as.numeric(labels), data)
x <- data_label
y <- factor(data_label[, 1])
colnames(x)[1] <- "labels"
test.fold <- split(sample(1:length(labels)), 1:folds)
for (mm in 1:folds) {
test <- test.fold[[mm]]
train_df <- x[-test, ]
test_df <- x[test, ]
svmmodel <- svm(labels ~ ., data = train_df, kernel = "radial", type = "C-classification", probability = TRUE)
svm_pred <- predict(svmmodel, test_df, probability = TRUE)
svm_pred <- attr(svm_pred, "probabilities")
colnames(svm_pred) <- paste0(colnames(svm_pred), "_pred_SVM")
true_label <- dummies::dummy(test_df$labels, sep = ".")
true_label <- data.frame(true_label)
colnames(true_label) <- gsub(".*?\\.", "", colnames(true_label))
colnames(true_label) <- paste0(colnames(true_label), "_true")
final_df_2 <- cbind(true_label, svm_pred)
final_df2_t <- t(final_df_2)
final_df2_t_la <- rownames(final_df2_t)
final_df2_t_c <- as.data.frame(cbind(final_df2_t_la, final_df2_t))
w <- t(svmmodel$coefs) %*% svmmodel$SV
rankingCriteria <- w * w
ranking <- rev(sort(rankingCriteria[1, ]))
import_f <- t(t(ranking))
import_s <- import_f[order(import_f, decreasing = T)][1:10]
import_a <- as.data.frame(cbind(row.names(t(t(import_f))), t(t(import_s))))
colnames(import_a) <- c("V1", paste0("V_", mm))
if (mm == 1) {
final_df_m <- final_df2_t_c
imports <- import_a
} else {
final_df_m <- merge(final_df_m, final_df2_t_c, by = "final_df2_t_la", all = T)
imports <- merge(imports, import_a, by = "V1", all = T)
}
}
final_res[[1]] <- final_df_m
final_res[[2]] <- imports
return(final_res)
} else {
stop(paste("Invalid method:", method))
}
}
class3 <- classification1(corrected_data1,method = "Decision Trees")
class4 <- classification1(corrected_data1,method = "K-Nearest Neighbor")
class1 <- classification1(corrected_data1,method = "AdaBoost")
class2 <- classification1(corrected_data1,method = "Bagging")
class5 <- classification1(corrected_data1,method = "Linear Discriminat Analysis")
class6 <- classification1(corrected_data1,method = "Naive Bayes")
class7 <- classification1(corrected_data1,method = "Partial Least Squares")
class8 <- classification1(corrected_data1,method = "Random Forest")
class9 <- classification1(corrected_data1,method = "Support Vector Machine")
remove.packages("MMEASE")
install.packages("C:/Users/Administrator/Documents/MMEASE_1.0.0.tar.gz", repos = NULL, type = "source")
library(MMEASE)
data <- read.csv("D:/server/mmease2025/MTBLS78_co_culture.csv")
filted_data <- filtering(data, 0.2)
imputed_data1 <- imputation(filted_data, method = "1/5 of minimum positive value")
imputed_data2 <- imputation(filted_data, method = "KNN")
transformed_data1 <- transformation(imputed_data1, method = "G-log")
transformed_data2 <- transformation(imputed_data1, method = "Log2")
transformed_data3 <- transformation(imputed_data1, method = "Log10")
normalized_data1 <- normalization(transformed_data1, method = "Auto Scaling")
normalized_data3 <- normalization(transformed_data1, method = "Mean")
normalized_data4 <- normalization(transformed_data1, method = "Median")
normalized_data5 <- normalization(transformed_data1, method = "MSTUS")
normalized_data6 <- normalization(transformed_data1, method = "SIS")
corrected_data1 <- batch_correction(normalized_data1, method = "ComBat")
corrected_data2 <- batch_correction(normalized_data1, method = "Limma")
res1 <- DifferentialAnalysis(corrected_data1,method = "t_test")
res2 <- DifferentialAnalysis(corrected_data1,method = "ANOVA")
res3 <- DifferentialAnalysis(corrected_data1,method = "FC")
res4 <- DifferentialAnalysis(corrected_data1,method = "PLS-DA")
res5 <- DifferentialAnalysis(corrected_data1,method = "OPLS-DA")
res6 <- DifferentialAnalysis(corrected_data1,method = "RF_RFE")
res7 <- DifferentialAnalysis(corrected_data1,method = "Kruskal_Wallis")
class1 <- classification(corrected_data1,method = "AdaBoost")
class3 <- classification(corrected_data1,method = "Decision Trees")
class4 <- classification(corrected_data1,method = "K-Nearest Neighbor")
?DifferentialAnalysis
library(MMEASE)
?DifferentialAnalysis
